geom_line() +
geom_point()
a %>%
filter(genre == "rock") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(rock_mean_popularity = mean)) %>%
ggplot(aes(x=year, y= rock_mean_popularity, group=1)) +
geom_line() +
geom_point()
a %>%
filter(genre == "latin") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(latin_mean_popularity = mean)) %>%
ggplot(aes(x=year, y= latin_mean_popularity, group=1)) +
geom_line() +
geom_point()
a %>%
filter(genre == "r&b") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(r_b_mean_popularity = mean)) %>%
ggplot(aes(x=year, y= r_b_mean_popularity, group=1)) +
geom_line() +
geom_point()
a %>%
filter(genre == "edm") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(edm_mean_popularity = mean)) %>%
ggplot(aes(x=year, y= edm_mean_popularity, group=1)) +
geom_line() +
geom_point()
# "pop"   "rap"   "rock"  "latin" "r&b"   "edm"
a %>%
filter(genre == "pop") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(pop_mean_popularity = mean))
total <- inner_join(pop, edm, by="year")
a %>%
filter(genre == "pop") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(pop_mean_popularity = mean)) -> pop
ggplot(aes(x=year, y= pop_mean_popularity, group=1), data = pop) +
geom_line() +
geom_point()
a %>%
filter(genre == "rap") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(rap_mean_popularity = mean)) -> rap
ggplot(aes(x=year, y= rap_mean_popularity, group=1), data=rap) +
geom_line() +
geom_point()
a %>%
filter(genre == "rock") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(rock_mean_popularity = mean)) -> rock
ggplot(aes(x=year, y= rock_mean_popularity, group=1), data=rock) +
geom_line() +
geom_point()
a %>%
filter(genre == "latin") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(latin_mean_popularity = mean)) -> latin
ggplot(aes(x=year, y= latin_mean_popularity, group=1), data=latin) +
geom_line() +
geom_point()
a %>%
filter(genre == "r&b") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(r_b_mean_popularity = mean)) -> r_b
ggplot(aes(x=year, y= r_b_mean_popularity, group=1), data=r_b) +
geom_line() +
geom_point()
a %>%
filter(genre == "edm") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(edm_mean_popularity = mean)) -> edm
ggplot(aes(x=year, y= edm_mean_popularity, group=1), data=edm) +
geom_line() +
geom_point()
total <- inner_join(pop, edm, by="year")
# "pop"   "rap"   "rock"  "latin" "r&b"   "edm"
View(total)
total <- inner_join(pop, rap, by="year")
total_1 <- inner_join(total, rock, by="year")
total_2 <- inner_join(total_1, latin, by="year")
total_3 <- inner_join(total_2, r_b, by="year")
total_4 <- inner_join(total_3, edm, by="year")
head(total_4)
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean))
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean)) %>%
ggplot(aes(year, mean_popularity, color = genre)) +
geom_line(size=1.5)
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean)) %>%
ggplot(aes(year, mean_popularity, group=1,color = genre)) +
geom_line(size=1.5)
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean)) %>%
ggplot(aes(year, mean_popularity, group=1,color = genre)) +
geom_line(size=1)
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean)) %>%
ggplot(aes(year, mean_popularity, group=1,color = genre)) +
geom_line(size=1) +
geom_point()
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean)) %>%
ggplot(aes(year, mean_popularity, group=1,color = genre)) +
geom_line(size=1) +
geom_point() +
theme_light()
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean)) %>%
ggplot(aes(year, mean_popularity, group=1,color = genre)) +
geom_line(size=1) +
geom_point() +
theme_bw()
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean)) %>%
ggplot(aes(year, mean_popularity, group=1,color = genre)) +
geom_line() +
geom_point() +
theme_bw()
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean))
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean)) %>%
ggplot(aes(year, mean_popularity, group=1,color = genre)) +
geom_point() +
theme_bw()
qplot(x=year, y = mean_popularity,data = m, color = genre,group=1,geom="line")
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean)) -> m
qplot(x=year, y = mean_popularity,data = m, color = genre,group=1,geom="line")
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean)) %>%
ggplot(aes(year, mean_popularity, group=1,color = genre)) +
geom_point() +
theme_bw()
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean)) %>%
ggplot(aes(year, mean_popularity, group=1,color = genre)) +
geom_line() +
geom_point() +
theme_bw()
a %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity = mean)) -> aaa
head(aaa)
%>%
View(aaa)
ggplot(aaa, aes(x = year, y = mean_popularity)) +
geom_point(aes(color = genre, size = mean_popularity), alpha = 0.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
scale_size(range = c(0.5, 12))  # Adjust the range of points size
ggplot(aaa, aes(x = year, y = mean_popularity)) +
geom_point(aes(color = genre, size = mean_popularity), alpha = 0.5)
ggplot(aaa, aes(x = year, y = mean_popularity)) +
geom_point(aes(color = genre)
ggplot(aaa, aes(x = year, y = mean_popularity)) +
ggplot(aaa, aes(x = year, y = mean_popularity)) +
geom_point(aes(color = genre))
ggplot(data = aaa, aes(x=year, y=mean_popularity, size = mean_popularity, color = genre))+
geom_point() +
theme_bw()
a %>%
filter(genre == "pop") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(pop_mean_popularity = mean)) -> pop
ggplot(aes(x=year, y= pop_mean_popularity, group=1), data = pop) +
geom_line() +
geom_point()
a %>%
filter(genre == "rap") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(rap_mean_popularity = mean)) -> rap
ggplot(aes(x=year, y= rap_mean_popularity, group=1), data=rap) +
geom_line() +
geom_point()
a %>%
filter(genre == "rock") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(rock_mean_popularity = mean)) -> rock
ggplot(aes(x=year, y= rock_mean_popularity, group=1), data=rock) +
geom_line() +
geom_point()
a %>%
filter(genre == "latin") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(latin_mean_popularity = mean)) -> latin
ggplot(aes(x=year, y= latin_mean_popularity, group=1), data=latin) +
geom_line() +
geom_point()
a %>%
filter(genre == "r&b") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(r_b_mean_popularity = mean)) -> r_b
ggplot(aes(x=year, y= r_b_mean_popularity, group=1), data=r_b) +
geom_line() +
geom_point()
a %>%
filter(genre == "edm") %>%
group_by(year) %>%
summarise_at(vars(popularity), list(edm_mean_popularity = mean)) -> edm
ggplot(aes(x=year, y= edm_mean_popularity, group=1), data=edm) +
geom_line() +
geom_point()
total <- inner_join(pop, rap, by="year")
total_1 <- inner_join(total, rock, by="year")
total_2 <- inner_join(total_1, latin, by="year")
total_3 <- inner_join(total_2, r_b, by="year")
total_4 <- inner_join(total_3, edm, by="year")
head(total_4)
ggplot(aes(x=year, y= edm_mean_popularity, group=1), data=total_4) +
geom_line() +
geom_point()
# "pop"   "rap"   "rock"  "latin" "r&b"   "edm"
a$year
unique(a$year)
2019-1957
head(a)
music_data <- a
music_data <- a
write_csv(music_data, "music_data.csv")
music_data %>%
head()
music_data %>%
select(c("track_name", "artist", "popularity", "track_album_name", "year")) %>%
head()
music_data %>%
select(c("track_name", "genre", "subgenre", "artist", "popularity", "track_album_name", "year")) %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity_by_genre_year = mean)) %>%
head()
music_data %>%
select(c("track_name", "genre", "subgenre", "artist", "popularity", "track_album_name", "year")) %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity_by_genre_year = mean)) -> music_1
write_csv(music_1, "music_1.csv")
View(music_1)
knitr::opts_chunk$set(echo = TRUE)
# Get the Data
spotify_music_data <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
# remove unnecessary variables and change variable names
library(tidyverse)
spotify_music_data %>%
select(-c("track_id", "track_album_id", "playlist_id")) %>%
rename(artist = track_artist, popularity = track_popularity, relese_date = track_album_release_date, genre = playlist_genre, subgenre = playlist_subgenre) -> spotify_music_data
colnames(spotify_music_data) # show the variables
str(spotify_music_data) # see the structure of the data
# save it to csv
write_csv(spotify_music_data, "spotify_music_data.csv")
head(spotify_music_data)
unique(spotify_music_data$genre)
unique(spotify_music_data$subgenre)
spotify_music_data %>%
count(genre)
spotify_music_data %>%
count(subgenre)
spotify_music_data %>%
mutate(year = format(as.Date(relese_date), "%Y"))
is.na(spotify_music_data_1$year)
spotify_music_data %>%
mutate(year = format(as.Date(relese_date), "%Y")) -> spotify_music_data_1
is.na(spotify_music_data_1$year)
spotify_music_data_1$relese_date[is.na(spotify_music_data_1$year)]
spotify_music_data_1$year
is.na(spotify_music_data_1$year)
spotify_music_data_1$relese_date[is.na(spotify_music_data_1$year)]
spotify_music_data_1$year
spotify_music_data %>%
mutate(year = format(as.Date(relese_date), "%Y")) -> j
sum(is.na(j$year))
j$year <- ifelse(is.na(j$year), j$relese_date, j$year)
sum(is.na(j$year))
head(j)
View(j)
spotify_music_data_updated <- j
names(spotify_music_data_updated)
spotify_music_data %>%
mutate(year = format(as.Date(relese_date), "%Y")) -> j
sum(is.na(j$year))
j$year <- ifelse(is.na(j$year), j$relese_date, j$year)
sum(is.na(j$year))
head(j)
spotify_music_data_updated <- j
names(spotify_music_data_updated)
spotify_music_data_updated %>%
select(c("track_name", "track_album_name", "playlist_name","artist", "popularity", "genre", "subgenre", "year", "danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration_ms")) %>%
group_by(year, genre) %>%
summarise_at(vars(popularity), list(mean_popularity_by_genre_year = mean)) -> spotify_music_updated_version
write_csv(spotify_music_updated_version, "spotify_music_updated_version.csv")
spotify_music_data %>%
mutate(year = format(as.Date(relese_date), "%Y")) -> j
sum(is.na(j$year))
j$year <- ifelse(is.na(j$year), j$relese_date, j$year)
sum(is.na(j$year))
head(j)
spotify_music_data_updated <- j
names(spotify_music_data_updated)
spotify_music_data_updated %>%
select(c("track_name", "track_album_name", "playlist_name","artist", "popularity", "genre", "subgenre", "year", "danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration_ms")) -> spotifyMusic
write_csv(spotifyMusic, "spotifyMusic.csv")
# Get the Data
spotify_music_data <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
# remove unnecessary variables and change variable names
library(tidyverse)
spotify_music_data %>%
select(-c("track_id", "track_album_id", "playlist_id")) %>%
rename(artist = track_artist, popularity = track_popularity, relese_date = track_album_release_date, genre = playlist_genre, subgenre = playlist_subgenre) -> spotify_music_data
colnames(spotify_music_data) # show the variables
str(spotify_music_data) # see the structure of the data
# save it to csv
write_csv(spotify_music_data, "spotify_music_data.csv")
# Get the Data
spotify_music_data <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
# remove unnecessary variables and change variable names
library(tidyverse)
spotify_music_data %>%
select(-c("track_id", "track_album_id", "playlist_id")) %>%
rename(artist = track_artist, popularity = track_popularity, relese_date = track_album_release_date, genre = playlist_genre, subgenre = playlist_subgenre) -> spotify_music_data
colnames(spotify_music_data) # show the variables
str(spotify_music_data) # see the structure of the data
spotify_music_data %>%
mutate(year = format(as.Date(relese_date), "%Y")) -> updated_spotify_music_data
sum(is.na(updated_spotify_music_data$year))
View(updated_spotify_music_data)
# Get the Data
spotify_music_data <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
# remove unnecessary variables and change variable names
library(tidyverse)
spotify_music_data %>%
select(-c("track_id", "track_album_id", "playlist_id")) %>%
rename(artist = track_artist, popularity = track_popularity, release_date = track_album_release_date, genre = playlist_genre, subgenre = playlist_subgenre) -> spotify_music_data
colnames(spotify_music_data) # show the variables
str(spotify_music_data) # see the structure of the data
# Extract only 'year' from release_date variable and then assign it to new variable called "year"
spotify_music_data %>%
mutate(year = format(as.Date(release_date), "%Y")) -> updated_spotify_music_data
sum(is.na(updated_spotify_music_data$year)) # There are 1886 NAs in this "year" variable
# The reason why there are NAs? It is because release_date variable has non-consistent format of date
# For example, "2019-06-14" or "2011"
updated_spotify_music_data$year <- ifelse(is.na(updated_spotify_music_data$year),
updated_spotify_music_data$relese_date,
updated_spotify_music_data$year) # Use ifelse statement to replace NAs with year values in release_date variable
sum(is.na(updated_spotify_music_data$year)) # check if it is resolved
head(updated_spotify_music_data) # show first 6 rows to check how it is going
names(updated_spotify_music_data) # show the variable names
updated_spotify_music_data %>%
select(c("track_name", "track_album_name", "playlist_name","artist", "popularity", "genre", "subgenre", "year", "danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration_ms")) -> spotifyMusic
write_csv(spotifyMusic, "spotifyMusic.csv")
write_csv(spotifyMusic, "spotifyMusic.csv")
setwd("~/Desktop/SPRING2022/CSC-485/Final_Project/CSC_485_Group/data")
# Get the Data
spotify_music_data <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
# remove unnecessary variables and change variable names
library(tidyverse)
spotify_music_data %>%
select(-c("track_id", "track_album_id", "playlist_id")) %>%
rename(artist = track_artist, popularity = track_popularity, release_date = track_album_release_date, genre = playlist_genre, subgenre = playlist_subgenre) -> spotify_music_data
colnames(spotify_music_data) # show the variables
str(spotify_music_data) # see the structure of the data
# Extract only 'year' from release_date variable and then assign it to new variable called "year"
spotify_music_data %>%
mutate(year = format(as.Date(release_date), "%Y")) -> updated_spotify_music_data
sum(is.na(updated_spotify_music_data$year)) # There are 1886 NAs in this "year" variable
# The reason why there are NAs? It is because release_date variable has non-consistent format of date
# For example, "2019-06-14" or "2011"
updated_spotify_music_data$year <- ifelse(is.na(updated_spotify_music_data$year),
updated_spotify_music_data$relese_date,
updated_spotify_music_data$year) # Use ifelse statement to replace NAs with year values in release_date variable
sum(is.na(updated_spotify_music_data$year)) # check if it is resolved
head(updated_spotify_music_data) # show first 6 rows to check how it is going
names(updated_spotify_music_data) # show the variable names
updated_spotify_music_data %>%
select(c("track_name", "track_album_name", "playlist_name","artist", "popularity", "genre", "subgenre", "year", "danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration_ms")) -> spotifyMusic
write_csv(spotifyMusic, "spotifyMusic.csv")
str(spotifyMusic)
spotfiyMusic$year<- as.numeric(spotfiyMusic$year)
typeof(spotifyMusic$year)
spotfiyMusic$year<- as.numeric(spotifyMusic$year)
# Get the Data
spotify_music_data <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
# remove unnecessary variables and change variable names
library(tidyverse)
spotify_music_data %>%
select(-c("track_id", "track_album_id", "playlist_id")) %>%
rename(artist = track_artist, popularity = track_popularity, release_date = track_album_release_date, genre = playlist_genre, subgenre = playlist_subgenre) -> spotify_music_data
colnames(spotify_music_data) # show the variables
str(spotify_music_data) # see the structure of the data
# Extract only 'year' from release_date variable and then assign it to new variable called "year"
spotify_music_data %>%
mutate(year = format(as.Date(release_date), "%Y")) -> updated_spotify_music_data
sum(is.na(updated_spotify_music_data$year)) # There are 1886 NAs in this "year" variable
# The reason why there are NAs? It is because release_date variable has non-consistent format of date
# For example, "2019-06-14" or "2011"
updated_spotify_music_data$year <- ifelse(is.na(updated_spotify_music_data$year),
updated_spotify_music_data$relese_date,
updated_spotify_music_data$year) # Use ifelse statement to replace NAs with year values in release_date variable
sum(is.na(updated_spotify_music_data$year)) # check if it is resolved
head(updated_spotify_music_data) # show first 6 rows to check how it is going
names(updated_spotify_music_data) # show the variable names
updated_spotify_music_data %>%
select(c("track_name", "track_album_name", "playlist_name","artist", "popularity", "genre", "subgenre", "year", "danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration_ms")) -> spotifyMusic
str(spotifyMusic) # found out that year is in chr, so change the datatype into double
spotfiyMusic$year<- as.numeric(spotifyMusic$year)
typeof(spotifyMusic$year)
str(spotifyMusic)
as.numeric(spotifyMusic$year)
View(spotifyMusic)
View(spotify_music_data)
# Get the Data
spotify_music_data <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
# remove unnecessary variables and change variable names
library(tidyverse)
spotify_music_data %>%
select(-c("track_id", "track_album_id", "playlist_id")) %>%
rename(artist = track_artist, popularity = track_popularity, release_date = track_album_release_date, genre = playlist_genre, subgenre = playlist_subgenre) -> spotify_music_data
colnames(spotify_music_data) # show the variables
str(spotify_music_data) # see the structure of the data
# Extract only 'year' from release_date variable and then assign it to new variable called "year"
spotify_music_data %>%
mutate(year = format(as.Date(release_date), "%Y")) -> updated_spotify_music_data
sum(is.na(updated_spotify_music_data$year)) # There are 1886 NAs in this "year" variable
# The reason why there are NAs? It is because release_date variable has non-consistent format of date
# For example, "2019-06-14" or "2011"
updated_spotify_music_data$year <- ifelse(is.na(updated_spotify_music_data$year),
updated_spotify_music_data$release_date,
updated_spotify_music_data$year) # Use ifelse statement to replace NAs with year values in release_date variable
sum(is.na(updated_spotify_music_data$year)) # check if it is resolved
head(updated_spotify_music_data) # show first 6 rows to check how it is going
names(updated_spotify_music_data) # show the variable names
updated_spotify_music_data %>%
select(c("track_name", "track_album_name", "playlist_name","artist", "popularity", "genre", "subgenre", "year", "danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration_ms")) -> spotifyMusic
str(spotifyMusic) # found out that year is in chr, so change the datatype into double
spotfiyMusic$year<- as.numeric(spotifyMusic$year)
typeof(spotifyMusic$year)
str(spotifyMusic)
write_csv(spotifyMusic, "spotifyMusic.csv")
str(spotifyMusic)
typeof(spotifyMusic$year)
sum(is.na(spotifyMusic$year))
# Get the Data
spotify_music_data <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
# remove unnecessary variables and change variable names
library(tidyverse)
spotify_music_data %>%
select(-c("track_id", "track_album_id", "playlist_id")) %>%
rename(artist = track_artist, popularity = track_popularity, release_date = track_album_release_date, genre = playlist_genre, subgenre = playlist_subgenre) -> spotify_music_data
colnames(spotify_music_data) # show the variables
str(spotify_music_data) # see the structure of the data
# Extract only 'year' from release_date variable and then assign it to new variable called "year"
spotify_music_data %>%
mutate(year = format(as.Date(release_date), "%Y")) -> updated_spotify_music_data
sum(is.na(updated_spotify_music_data$year)) # There are 1886 NAs in this "year" variable
# The reason why there are NAs? It is because release_date variable has non-consistent format of date
# For example, "2019-06-14" or "2011"
updated_spotify_music_data$year <- ifelse(is.na(updated_spotify_music_data$year),
updated_spotify_music_data$release_date,
updated_spotify_music_data$year) # Use ifelse statement to replace NAs with year values in release_date variable
sum(is.na(updated_spotify_music_data$year)) # check if it is resolved
head(updated_spotify_music_data) # show first 6 rows to check how it is going
names(updated_spotify_music_data) # show the variable names
updated_spotify_music_data %>%
select(c("track_name", "track_album_name", "playlist_name","artist", "popularity", "genre", "subgenre", "year", "danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration_ms")) -> spotifyMusic
str(spotifyMusic) # found out that year is in chr, so change the datatype into double
spotfiyMusic$year<- as.numeric(spotifyMusic$year)
spotfiyMusic$year<- as.numeric(spotifyMusic$year)
str(spotifyMusic) # found out that year is in chr, so change the datatype into double
spotfiyMusic$year<- as.numeric(spotifyMusic$year)
# Get the Data
spotify_music_data <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
# remove unnecessary variables and change variable names
library(tidyverse)
spotify_music_data %>%
select(-c("track_id", "track_album_id", "playlist_id")) %>%
rename(artist = track_artist, popularity = track_popularity, release_date = track_album_release_date, genre = playlist_genre, subgenre = playlist_subgenre) -> spotify_music_data
colnames(spotify_music_data) # show the variables
str(spotify_music_data) # see the structure of the data
# Extract only 'year' from release_date variable and then assign it to new variable called "year"
spotify_music_data %>%
mutate(year = format(as.Date(release_date), "%Y")) -> updated_spotify_music_data
sum(is.na(updated_spotify_music_data$year)) # There are 1886 NAs in this "year" variable
# The reason why there are NAs? It is because release_date variable has non-consistent format of date
# For example, "2019-06-14" or "2011"
updated_spotify_music_data$year <- ifelse(is.na(updated_spotify_music_data$year),
updated_spotify_music_data$release_date,
updated_spotify_music_data$year) # Use ifelse statement to replace NAs with year values in release_date variable
sum(is.na(updated_spotify_music_data$year)) # check if it is resolved
head(updated_spotify_music_data) # show first 6 rows to check how it is going
names(updated_spotify_music_data) # show the variable names
updated_spotify_music_data %>%
select(c("track_name", "track_album_name", "playlist_name","artist", "popularity", "genre", "subgenre", "year", "danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration_ms")) -> Spotify_Music
str(Spotify_Music) # found out that year is in chr, so change the datatype into double
Spotify_Music$year<- as.numeric(Spotify_Music$year)
typeof(Spotify_Music$year)
str(Spotify_Music)
write_csv(Spotify_Music, "Spotify_Music.csv")
